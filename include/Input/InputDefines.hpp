#pragma once

namespace Eternal
{
	namespace InputSystem
	{
		static constexpr uint32_t	InputCurrentState	= 0x1;
		static constexpr uint32_t	InputPreviousState	= 0x2;
		static constexpr float		DefaultDeadZone		= 0.2f;

		enum class InputKey
		{
			KEY_A = 0,
			KEY_B,
			KEY_C,
			KEY_D,
			KEY_E,
			KEY_F,
			KEY_G,
			KEY_H,
			KEY_I,
			KEY_J,
			KEY_K,
			KEY_L,
			KEY_M,
			KEY_N,
			KEY_O,
			KEY_P,
			KEY_Q,
			KEY_R,
			KEY_S,
			KEY_T,
			KEY_U,
			KEY_V,
			KEY_W,
			KEY_X,
			KEY_Y,
			KEY_Z,
			KEY_UP,
			KEY_DOWN,
			KEY_LEFT,
			KEY_RIGHT,
			KEY_BACKSPACE,
			KEY_DEL,
			KEY_TAB,
			//KEY_CLEAR,
			KEY_RETURN,
			KEY_PAUSE,
			KEY_ESC,
			KEY_SPACE,
			KEY_KP0,
			KEY_KP1,
			KEY_KP2,
			KEY_KP3,
			KEY_KP4,
			KEY_KP5,
			KEY_KP6,
			KEY_KP7,
			KEY_KP8,
			KEY_KP9,
			KEY_KPPERIOD,
			KEY_KPDIV,
			KEY_KPMUL,
			KEY_KPMINUS,
			KEY_KPPLUS,
			KEY_KPENTER,
			KEY_KPEQ,
			KEY_INS,
			KEY_HOME,
			KEY_END,
			KEY_PGUP,
			KEY_PGDOWN,
			KEY_F1,
			KEY_F2,
			KEY_F3,
			KEY_F4,
			KEY_F5,
			KEY_F6,
			KEY_F7,
			KEY_F8,
			KEY_F9,
			KEY_F10,
			KEY_F11,
			KEY_F12,
			KEY_ALPHA0,
			KEY_ALPHA1,
			KEY_ALPHA2,
			KEY_ALPHA3,
			KEY_ALPHA4,
			KEY_ALPHA5,
			KEY_ALPHA6,
			KEY_ALPHA7,
			KEY_ALPHA8,
			KEY_ALPHA9,
			KEY_EXCLAIM,
			KEY_DOUBLEQUOTE,
			KEY_HASH,
			KEY_DOLLAR,
			KEY_AMPERSAND,
			KEY_QUOTE,
			KEY_LEFTPARENTHESIS,
			KEY_RIGHTPARENTHESIS,
			KEY_ASTERISK,
			KEY_PLUS,
			KEY_MINUS,
			KEY_PERIOD,
			KEY_SLASH,
			KEY_COLON,
			KEY_SEMICOLON,
			KEY_COMMA,
			KEY_LESS,
			KEY_EQ,
			KEY_GREATER,
			KEY_QUESTION,
			KEY_AT,
			KEY_LEFTBRACKET,
			KEY_RIGHTBRACKET,
			KEY_BACKSLASH,
			KEY_CARET,
			KEY_UNDERSCORE,
			KEY_BACKQUOTE,
			KEY_NUMLOCK,
			KEY_CAPSLOCK,
			KEY_SCROLLLOCK,
			KEY_LEFTCTRL,
			KEY_RIGHTCTRL,
			KEY_ALT,
			KEY_ALTGR,
			KEY_LEFTSHIFT,
			KEY_RIGHTSHIFT,
			KEY_LEFTWINDOWS,
			KEY_RIGHTWINDOWS,
			KEY_APPLICATION,
			KEY_PRINT,
			KEY_PRINTSCR,
			KEY_BREAK,

			KEY_MOUSE0,
			KEY_MOUSE1,
			KEY_MOUSE2,
			KEY_MOUSE3,
			KEY_MOUSE4,
			KEY_MOUSE5,
			KEY_MOUSE6,

			KEY_JOY0_UP,
			KEY_JOY0_DOWN,
			KEY_JOY0_LEFT,
			KEY_JOY0_RIGHT,

			KEY_JOY0_BUTTON0, // A
			KEY_JOY0_BUTTON1, // B
			KEY_JOY0_BUTTON2, // X
			KEY_JOY0_BUTTON3, // Y
			KEY_JOY0_BUTTON4, // LB
			KEY_JOY0_BUTTON5, // RB
			KEY_JOY0_BUTTON6, // Back
			KEY_JOY0_BUTTON7, // Start
			KEY_JOY0_BUTTON8, // LS
			KEY_JOY0_BUTTON9, // RS
			KEY_JOY0_BUTTON10,
			KEY_JOY0_BUTTON11,
			KEY_JOY0_BUTTON12,
			KEY_JOY0_BUTTON13,
			KEY_JOY0_BUTTON14,
			KEY_JOY0_BUTTON15,
			KEY_JOY0_BUTTON16,
			KEY_JOY0_BUTTON17,
			KEY_JOY0_BUTTON18,
			KEY_JOY0_BUTTON19,

			KEY_JOY1_UP,
			KEY_JOY1_DOWN,
			KEY_JOY1_LEFT,
			KEY_JOY1_RIGHT,

			KEY_JOY1_BUTTON0,
			KEY_JOY1_BUTTON1,
			KEY_JOY1_BUTTON2,
			KEY_JOY1_BUTTON3,
			KEY_JOY1_BUTTON4,
			KEY_JOY1_BUTTON5,
			KEY_JOY1_BUTTON6,
			KEY_JOY1_BUTTON7,
			KEY_JOY1_BUTTON8,
			KEY_JOY1_BUTTON9,
			KEY_JOY1_BUTTON10,
			KEY_JOY1_BUTTON11,
			KEY_JOY1_BUTTON12,
			KEY_JOY1_BUTTON13,
			KEY_JOY1_BUTTON14,
			KEY_JOY1_BUTTON15,
			KEY_JOY1_BUTTON16,
			KEY_JOY1_BUTTON17,
			KEY_JOY1_BUTTON18,
			KEY_JOY1_BUTTON19,

			KEY_JOY2_UP,
			KEY_JOY2_DOWN,
			KEY_JOY2_LEFT,
			KEY_JOY2_RIGHT,

			KEY_JOY2_BUTTON0,
			KEY_JOY2_BUTTON1,
			KEY_JOY2_BUTTON2,
			KEY_JOY2_BUTTON3,
			KEY_JOY2_BUTTON4,
			KEY_JOY2_BUTTON5,
			KEY_JOY2_BUTTON6,
			KEY_JOY2_BUTTON7,
			KEY_JOY2_BUTTON8,
			KEY_JOY2_BUTTON9,
			KEY_JOY2_BUTTON10,
			KEY_JOY2_BUTTON11,
			KEY_JOY2_BUTTON12,
			KEY_JOY2_BUTTON13,
			KEY_JOY2_BUTTON14,
			KEY_JOY2_BUTTON15,
			KEY_JOY2_BUTTON16,
			KEY_JOY2_BUTTON17,
			KEY_JOY2_BUTTON18,
			KEY_JOY2_BUTTON19,

			KEY_JOY3_UP,
			KEY_JOY3_DOWN,
			KEY_JOY3_LEFT,
			KEY_JOY3_RIGHT,

			KEY_JOY3_BUTTON0,
			KEY_JOY3_BUTTON1,
			KEY_JOY3_BUTTON2,
			KEY_JOY3_BUTTON3,
			KEY_JOY3_BUTTON4,
			KEY_JOY3_BUTTON5,
			KEY_JOY3_BUTTON6,
			KEY_JOY3_BUTTON7,
			KEY_JOY3_BUTTON8,
			KEY_JOY3_BUTTON9,
			KEY_JOY3_BUTTON10,
			KEY_JOY3_BUTTON11,
			KEY_JOY3_BUTTON12,
			KEY_JOY3_BUTTON13,
			KEY_JOY3_BUTTON14,
			KEY_JOY3_BUTTON15,
			KEY_JOY3_BUTTON16,
			KEY_JOY3_BUTTON17,
			KEY_JOY3_BUTTON18,
			KEY_JOY3_BUTTON19,

			KEY_COUNT,
			KEY_COUNT_KEYBOARD = KEY_MOUSE0,
			KEY_INVALID = ~0
		};

		enum class InputAxis
		{
			AXIS_MOUSE_X = 0,
			AXIS_MOUSE_Y,

			AXIS_JOY0_LX,
			AXIS_JOY0_LY,
			AXIS_JOY0_RX,
			AXIS_JOY0_RY,
			AXIS_JOY0_ZM,
			AXIS_JOY0_ZP,

			AXIS_JOY1_LX,
			AXIS_JOY1_LY,
			AXIS_JOY1_RX,
			AXIS_JOY1_RY,
			AXIS_JOY1_ZM,
			AXIS_JOY1_ZP,

			AXIS_JOY2_LX,
			AXIS_JOY2_LY,
			AXIS_JOY2_RX,
			AXIS_JOY2_RY,
			AXIS_JOY2_ZM,
			AXIS_JOY2_ZP,

			AXIS_JOY3_LX,
			AXIS_JOY3_LY,
			AXIS_JOY3_RX,
			AXIS_JOY3_RY,
			AXIS_JOY3_ZM,
			AXIS_JOY3_ZP,

			AXIS_COUNT,
			AXIS_INVALID = AXIS_COUNT
		};

		enum class KeyState
		{
			KEYSTATE_DOWN	= 0,
			KEYSTATE_UP		= 1
		};

		enum class KeyEvent
		{
			KEYEVENT_UP,
			KEYEVENT_DOWN,
			KEYEVENT_PRESSED
		};

		enum class AxisFilter
		{
			AXISFILTER_RAW,
			AXISFILTER_DEADZONE
		};

		struct KeyRecord
		{
			InputKey KeyName;
			KeyState State;
			KeyRecord(const InputKey& InKeyName, const KeyState& InState)
				: KeyName(InKeyName)
				, State(InState)
			{
			}
		};
	}
}
